// <auto-generated />
using System;
using Esoteric.Finance.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Esoteric.Finance.Data.Migrations
{
    [DbContext(typeof(EsotericFinanceContext))]
    [Migration("20220906175321_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Dbo.GeneralLog", b =>
                {
                    b.Property<long>("GeneralLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("esoteric-finance-api");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int>("EventCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exception")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("LevelCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Scope")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("GeneralLogId");

                    b.ToTable("GeneralLog", "dbo");
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("esoteric-finance-api");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", "Payment");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Correction"
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Miscellaneous"
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Auto"
                        },
                        new
                        {
                            CategoryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Beauty"
                        },
                        new
                        {
                            CategoryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Bill"
                        },
                        new
                        {
                            CategoryId = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Charity"
                        },
                        new
                        {
                            CategoryId = 7,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Education"
                        },
                        new
                        {
                            CategoryId = 8,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Entertainment"
                        },
                        new
                        {
                            CategoryId = 9,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Food"
                        },
                        new
                        {
                            CategoryId = 10,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Gift"
                        },
                        new
                        {
                            CategoryId = 11,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Health"
                        },
                        new
                        {
                            CategoryId = 12,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Home"
                        },
                        new
                        {
                            CategoryId = 13,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Income"
                        },
                        new
                        {
                            CategoryId = 14,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Legal"
                        },
                        new
                        {
                            CategoryId = 15,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Office"
                        },
                        new
                        {
                            CategoryId = 16,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Pet"
                        },
                        new
                        {
                            CategoryId = 17,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Shipping"
                        },
                        new
                        {
                            CategoryId = 18,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Transfer"
                        },
                        new
                        {
                            CategoryId = 19,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Travel"
                        },
                        new
                        {
                            CategoryId = 20,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Utilities"
                        });
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.Detail", b =>
                {
                    b.Property<long>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("esoteric-finance-api");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("DetailId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Detail", "Payment");

                    b.HasData(
                        new
                        {
                            DetailId = 1L,
                            CategoryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Correction"
                        },
                        new
                        {
                            DetailId = 2L,
                            CategoryId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Miscellaneous"
                        },
                        new
                        {
                            DetailId = 3L,
                            CategoryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Tires"
                        },
                        new
                        {
                            DetailId = 4L,
                            CategoryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Clothes"
                        },
                        new
                        {
                            DetailId = 5L,
                            CategoryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Insurance"
                        },
                        new
                        {
                            DetailId = 6L,
                            CategoryId = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Tithe"
                        },
                        new
                        {
                            DetailId = 7L,
                            CategoryId = 7,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Certificate"
                        },
                        new
                        {
                            DetailId = 8L,
                            CategoryId = 8,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Game"
                        },
                        new
                        {
                            DetailId = 9L,
                            CategoryId = 9,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Dine"
                        },
                        new
                        {
                            DetailId = 10L,
                            CategoryId = 9,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Takeout"
                        },
                        new
                        {
                            DetailId = 11L,
                            CategoryId = 9,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Drink"
                        },
                        new
                        {
                            DetailId = 12L,
                            CategoryId = 9,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Snack"
                        },
                        new
                        {
                            DetailId = 13L,
                            CategoryId = 10,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Birthday, Mom"
                        },
                        new
                        {
                            DetailId = 14L,
                            CategoryId = 11,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Medicine"
                        },
                        new
                        {
                            DetailId = 15L,
                            CategoryId = 12,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cleaning Supplies"
                        },
                        new
                        {
                            DetailId = 16L,
                            CategoryId = 13,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Paycheck"
                        },
                        new
                        {
                            DetailId = 17L,
                            CategoryId = 14,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Taxes"
                        },
                        new
                        {
                            DetailId = 18L,
                            CategoryId = 15,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Paper"
                        },
                        new
                        {
                            DetailId = 19L,
                            CategoryId = 16,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Litter"
                        },
                        new
                        {
                            DetailId = 20L,
                            CategoryId = 17,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Stamps"
                        },
                        new
                        {
                            DetailId = 21L,
                            CategoryId = 18,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Withdrawal"
                        },
                        new
                        {
                            DetailId = 22L,
                            CategoryId = 18,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Deposit"
                        },
                        new
                        {
                            DetailId = 23L,
                            CategoryId = 18,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Pay Credit Card"
                        },
                        new
                        {
                            DetailId = 24L,
                            CategoryId = 19,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Gas"
                        },
                        new
                        {
                            DetailId = 25L,
                            CategoryId = 20,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Internet"
                        });
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.Initiator", b =>
                {
                    b.Property<int>("InitiatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("esoteric-finance-api");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("InitiatorId");

                    b.ToTable("Initiator", "Payment");

                    b.HasData(
                        new
                        {
                            InitiatorId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Account Owner"
                        });
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.Method", b =>
                {
                    b.Property<int>("MethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("esoteric-finance-api");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("MethodId");

                    b.ToTable("Method", "Payment");

                    b.HasData(
                        new
                        {
                            MethodId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Cash"
                        });
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.Recipient", b =>
                {
                    b.Property<int>("RecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("esoteric-finance-api");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("RecipientId");

                    b.ToTable("Recipient", "Payment");

                    b.HasData(
                        new
                        {
                            RecipientId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "IRS"
                        },
                        new
                        {
                            RecipientId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Amazon"
                        },
                        new
                        {
                            RecipientId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Walmart"
                        },
                        new
                        {
                            RecipientId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Target"
                        });
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.Transaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("esoteric-finance-api");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int>("InitiatorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RecipientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Transaction", "Payment");
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.TransactionDetail", b =>
                {
                    b.Property<long>("TransactionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("esoteric-finance-api");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<long>("DetailId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Multiplier")
                        .HasColumnType("REAL");

                    b.Property<long>("TransactionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransactionDetailId");

                    b.HasIndex("DetailId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionDetail", "Payment");
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.TransactionMethod", b =>
                {
                    b.Property<long>("TransactionMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("esoteric-finance-api");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int>("MethodId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TransactionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransactionMethodId");

                    b.HasIndex("MethodId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionMethod", "Payment");
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.Detail", b =>
                {
                    b.HasOne("Esoteric.Finance.Abstractions.Entities.Payment.Category", "Category")
                        .WithMany("Details")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.Transaction", b =>
                {
                    b.HasOne("Esoteric.Finance.Abstractions.Entities.Payment.Initiator", "Initiator")
                        .WithMany("Transactions")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esoteric.Finance.Abstractions.Entities.Payment.Recipient", "Recipient")
                        .WithMany("Transactions")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.TransactionDetail", b =>
                {
                    b.HasOne("Esoteric.Finance.Abstractions.Entities.Payment.Detail", "Detail")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esoteric.Finance.Abstractions.Entities.Payment.Transaction", "Transaction")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detail");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.TransactionMethod", b =>
                {
                    b.HasOne("Esoteric.Finance.Abstractions.Entities.Payment.Method", "Method")
                        .WithMany("TransactionMethods")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esoteric.Finance.Abstractions.Entities.Payment.Transaction", "Transaction")
                        .WithMany("TransactionMethods")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Method");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.Category", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.Detail", b =>
                {
                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.Initiator", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.Method", b =>
                {
                    b.Navigation("TransactionMethods");
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.Recipient", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Esoteric.Finance.Abstractions.Entities.Payment.Transaction", b =>
                {
                    b.Navigation("TransactionDetails");

                    b.Navigation("TransactionMethods");
                });
#pragma warning restore 612, 618
        }
    }
}
